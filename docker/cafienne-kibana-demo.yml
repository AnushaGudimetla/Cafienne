# Copyright (c) 2016 SpronQ
# This docker-compose file composed the core of the Cafienne Case File Engine
#
# This compose will work with docker 1.11+ and docker-compose 1.7+
#
# To run, call:
#   $ docker-compose -f cafienne-kibana-demo.yml up
#
version: '2.1'
services:
  cmmn-modeler:
    image: cafienne/modeler:latest
    container_name: modeler
    expose:
      - 3001
    ports:
      - "3001:3001"
    hostname: modeler
    networks:
      - "cafienne_nw"
    volumes:
      - ./../deployments/definitions:/usr/src/app/repository_deploy
      - ./../workspace/definitions:/usr/src/app/repository
    depends_on:
      cafienne:
        condition: service_healthy
  cafienne-ui:
    image: cafienne/ui:latest
    container_name: cafienne-ui
    expose:
      - 80
    ports:
      - "8081:80"
    hostname: cafienne-ui
    networks:
      - "cafienne_nw"
    environment:
      - NODE_ENV=production
    depends_on:
      cafienne:
        condition: service_healthy
    links:
      - cafienne
      - elasticsearch
  cafienne-admin-ui:
    image: cafienne/admin-ui:latest
    container_name: cafienne-admin-ui
    expose:
      - 80
    ports:
      - "8082:80"
    hostname: cafienne-admin-ui
    networks:
      - "cafienne_nw"
    environment:
      - NODE_ENV=production
    depends_on:
      cafienne:
        condition: service_healthy
    links:
      - cafienne
      - elasticsearch
  cafienne:
    image: cafienne/engine:latest
    container_name: cafienne
    expose:
      - 9999
      - 18082
    ports:
      - "9999:9999"
      - "18082:18082"
    hostname: cafienne
    healthcheck:
      test: ["CMD", "wget", "-s", "http://localhost:18082/api-docs"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - "cafienne_nw"
    environment:
      - CAFIENNE_HOME=/opt/cafienne
      - CAFIENNE_CONF=/opt/cafienne/conf
    volumes:
      - ./cafienne/journal:/opt/cafienne/journal
      - ./../deployments/definitions:/opt/cafienne/definitions
      - ./../deployments/conf:/opt/cafienne/conf
    depends_on:
      elasticsearch:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      mailcatcher:
        condition: service_healthy
    links:
      - elasticsearch
      - cassandra
      - mailcatcher
  kibana:
    image: kibana:4
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: http://elastic:9200
    expose:
      - 5601
    ports:
      - "5601:5601"
    hostname: kibana
    networks:
      - "cafienne_nw"
    depends_on:
      elasticsearch:
        condition: service_healthy
    links:
      - elasticsearch
  elasticsearch:
    image: cafienne/elasticsearch:2-head-mapper
    container_name: elastic
    environment:
      - "ES_JAVA_OPTS=-Des.cluster.name=cafienne"
    expose:
      - 9200
      - 9300
    ports:
      - "9200:9200"
      - "9300:9300"
    hostname: elastic
    networks:
      - "cafienne_nw"
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cat/health"]
      interval: 30s
      timeout: 10s
      retries: 5
  cassandra:
    image: cassandra:latest
    container_name: cassandra
    expose:
      - 9042
    ports:
      - "9042:9042"
    hostname: cassandra
    healthcheck:
      test: ["CMD", "cqlsh", "--execute", "show version;quit"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - "cafienne_nw"
    volumes:
     - ./cassandra/data:/var/lib/cassandra
  mailcatcher:
    image: schickling/mailcatcher:latest
    container_name: mailcatcher
    expose:
      - 1080
      - 1025
    ports:
      - "1080:1080"
    hostname: mailcatcher
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1080"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - cafienne_nw
networks:
  cafienne_nw:
    driver: bridge
